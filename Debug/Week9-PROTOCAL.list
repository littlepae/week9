
Week9-PROTOCAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be4  08003be4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000070  08003c5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08003c5c  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ede  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015f2  00000000  00000000  00027f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e8  00000000  00000000  00029570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  00029c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000158a4  00000000  00000000  0002a288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000616f  00000000  00000000  0003fb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085aea  00000000  00000000  00045c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c60  00000000  00000000  000cb800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003974 	.word	0x08003974

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003974 	.word	0x08003974

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004de:	f000 fe95 	bl	800120c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e2:	f000 f831 	bl	8000548 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e6:	f000 f8eb 	bl	80006c0 <MX_GPIO_Init>
	MX_DMA_Init();
 80004ea:	f000 f8c1 	bl	8000670 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80004ee:	f000 f895 	bl	800061c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	UART2.huart = &huart2;
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <main+0x64>)
 80004f4:	4a12      	ldr	r2, [pc, #72]	; (8000540 <main+0x68>)
 80004f6:	601a      	str	r2, [r3, #0]
	UART2.RxLen = 255;
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <main+0x64>)
 80004fa:	22ff      	movs	r2, #255	; 0xff
 80004fc:	80da      	strh	r2, [r3, #6]
	UART2.TxLen = 255;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <main+0x64>)
 8000500:	22ff      	movs	r2, #255	; 0xff
 8000502:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0x64>)
 8000506:	f000 f94b 	bl	80007a0 <UARTInit>
	UARTResetStart(&UART2);
 800050a:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x64>)
 800050c:	f000 f970 	bl	80007f0 <UARTResetStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		int16_t inputChar = UARTReadChar(&UART2);
 8000510:	480a      	ldr	r0, [pc, #40]	; (800053c <main+0x64>)
 8000512:	f000 f991 	bl	8000838 <UARTReadChar>
 8000516:	4603      	mov	r3, r0
 8000518:	80fb      	strh	r3, [r7, #6]
		if (inputChar != -1)
 800051a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800051e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000522:	d006      	beq.n	8000532 <main+0x5a>
#ifdef UARTDEBUG
			char temp[32];
			sprintf(temp, "Recived [%d]\r\n", inputChar);
			UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));
#else
			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
 8000524:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <main+0x64>)
 800052a:	2101      	movs	r1, #1
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x6c>)
 800052e:	f000 fa45 	bl	80009bc <DynamixelProtocal2>

		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		UARTTxDumpBuffer(&UART2);
 8000532:	4802      	ldr	r0, [pc, #8]	; (800053c <main+0x64>)
 8000534:	f000 f9aa 	bl	800088c <UARTTxDumpBuffer>
	{
 8000538:	e7ea      	b.n	8000510 <main+0x38>
 800053a:	bf00      	nop
 800053c:	2000008c 	.word	0x2000008c
 8000540:	20000380 	.word	0x20000380
 8000544:	200000a4 	.word	0x200000a4

08000548 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f989 	bl	800386e <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80005b8:	2310      	movs	r3, #16
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c2:	2304      	movs	r3, #4
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fccc 	bl	8001f6c <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
	{
		Error_Handler();
 80005da:	f000 fc77 	bl	8000ecc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 ff26 	bl	800244c <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000606:	f000 fc61 	bl	8000ecc <Error_Handler>
	}
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART2_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000654:	f002 f8ec 	bl	8002830 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800065e:	f000 fc35 	bl	8000ecc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000380 	.word	0x20000380
 800066c:	40004400 	.word	0x40004400

08000670 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_DMA_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <MX_DMA_Init+0x4c>)
 8000680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_DMA_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2010      	movs	r0, #16
 8000698:	f000 ff05 	bl	80014a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800069c:	2010      	movs	r0, #16
 800069e:	f000 ff1e 	bl	80014de <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2011      	movs	r0, #17
 80006a8:	f000 fefd 	bl	80014a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006ac:	2011      	movs	r0, #17
 80006ae:	f000 ff16 	bl	80014de <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0xd4>)
 800074c:	f001 fbf4 	bl	8001f38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_GPIO_Init+0xd8>)
 8000758:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_GPIO_Init+0xdc>)
 8000766:	f001 fa65 	bl	8001c34 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800076a:	2320      	movs	r3, #32
 800076c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000782:	f001 fa57 	bl	8001c34 <HAL_GPIO_Init>

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	10210000 	.word	0x10210000
 800079c:	40020800 	.word	0x40020800

080007a0 <UARTInit>:

/* USER CODE BEGIN 4 */
void UARTInit(UARTStucrture *uart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <UARTInit+0x4c>)
 80007aa:	88db      	ldrh	r3, [r3, #6]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	f003 f820 	bl	80037f4 <calloc>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <UARTInit+0x4c>)
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	f003 f816 	bl	80037f4 <calloc>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	81da      	strh	r2, [r3, #14]

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000008c 	.word	0x2000008c

080007f0 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6919      	ldr	r1, [r3, #16]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	88db      	ldrh	r3, [r3, #6]
 8000804:	461a      	mov	r2, r3
 8000806:	f002 f8cd 	bl	80029a4 <HAL_UART_Receive_DMA>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	88db      	ldrh	r3, [r3, #6]
 800081e:	461a      	mov	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	1ad3      	subs	r3, r2, r3
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000844:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	8a9b      	ldrh	r3, [r3, #20]
 800084a:	461c      	mov	r4, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ffe0 	bl	8000812 <UARTGetRxHead>
 8000852:	4603      	mov	r3, r0
 8000854:	429c      	cmp	r4, r3
 8000856:	d013      	beq.n	8000880 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	8a92      	ldrh	r2, [r2, #20]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	8a9b      	ldrh	r3, [r3, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	88d2      	ldrh	r2, [r2, #6]
 8000870:	fb93 f1f2 	sdiv	r1, r3, r2
 8000874:	fb02 f201 	mul.w	r2, r2, r1
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000884:	4618      	mov	r0, r3
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bd90      	pop	{r4, r7, pc}

0800088c <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b20      	cmp	r3, #32
 80008a0:	d13d      	bne.n	800091e <UARTTxDumpBuffer+0x92>
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <UARTTxDumpBuffer+0x9c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d139      	bne.n	800091e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <UARTTxDumpBuffer+0x9c>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	89da      	ldrh	r2, [r3, #14]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	899b      	ldrh	r3, [r3, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d02d      	beq.n	8000918 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	89da      	ldrh	r2, [r3, #14]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d906      	bls.n	80008d6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	89da      	ldrh	r2, [r3, #14]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	e005      	b.n	80008e2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	889a      	ldrh	r2, [r3, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	8992      	ldrh	r2, [r2, #12]
 80008f0:	4413      	add	r3, r2
 80008f2:	89fa      	ldrh	r2, [r7, #14]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f001 ffe9 	bl	80028cc <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	899b      	ldrh	r3, [r3, #12]
 80008fe:	461a      	mov	r2, r3
 8000900:	89fb      	ldrh	r3, [r7, #14]
 8000902:	4413      	add	r3, r2
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	8892      	ldrh	r2, [r2, #4]
 8000908:	fb93 f1f2 	sdiv	r1, r3, r2
 800090c:	fb02 f201 	mul.w	r2, r2, r1
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	b29a      	uxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <UARTTxDumpBuffer+0x9c>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
	}
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001a3 	.word	0x200001a3

0800092c <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	4613      	mov	r3, r2
 8000938:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	4293      	cmp	r3, r2
 8000942:	bf28      	it	cs
 8000944:	4613      	movcs	r3, r2
 8000946:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000948:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	889b      	ldrh	r3, [r3, #4]
 800094e:	4619      	mov	r1, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	89db      	ldrh	r3, [r3, #14]
 8000954:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000956:	4293      	cmp	r3, r2
 8000958:	bfa8      	it	ge
 800095a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800095c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	89d2      	ldrh	r2, [r2, #14]
 8000966:	4413      	add	r3, r2
 8000968:	8aba      	ldrh	r2, [r7, #20]
 800096a:	68b9      	ldr	r1, [r7, #8]
 800096c:	4618      	mov	r0, r3
 800096e:	f002 ff73 	bl	8003858 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	89db      	ldrh	r3, [r3, #14]
 8000976:	461a      	mov	r2, r3
 8000978:	8afb      	ldrh	r3, [r7, #22]
 800097a:	4413      	add	r3, r2
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	8892      	ldrh	r2, [r2, #4]
 8000980:	fb93 f1f2 	sdiv	r1, r3, r2
 8000984:	fb02 f201 	mul.w	r2, r2, r1
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	b29a      	uxth	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8000990:	8afa      	ldrh	r2, [r7, #22]
 8000992:	8abb      	ldrh	r3, [r7, #20]
 8000994:	429a      	cmp	r2, r3
 8000996:	d00a      	beq.n	80009ae <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	6898      	ldr	r0, [r3, #8]
 800099c:	8abb      	ldrh	r3, [r7, #20]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80009a2:	8afa      	ldrh	r2, [r7, #22]
 80009a4:	8abb      	ldrh	r3, [r7, #20]
 80009a6:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80009a8:	461a      	mov	r2, r3
 80009aa:	f002 ff55 	bl	8003858 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f7ff ff6c 	bl	800088c <UARTTxDumpBuffer>

}
 80009b4:	bf00      	nop
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <DynamixelProtocal2>:


void DynamixelProtocal2(uint8_t *Memory, uint8_t MotorID, int16_t dataIn,
		UARTStucrture *uart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b096      	sub	sp, #88	; 0x58
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	72fb      	strb	r3, [r7, #11]
 80009ca:	4613      	mov	r3, r2
 80009cc:	813b      	strh	r3, [r7, #8]
	static uint16_t CRCCheck = 0;
	static uint16_t packetSize = 0;
	static uint16_t CRC_accum;

	//State Machine
	switch (State)
 80009ce:	4b97      	ldr	r3, [pc, #604]	; (8000c2c <DynamixelProtocal2+0x270>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b0a      	cmp	r3, #10
 80009d4:	f200 821c 	bhi.w	8000e10 <DynamixelProtocal2+0x454>
 80009d8:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <DynamixelProtocal2+0x24>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	08000a0d 	.word	0x08000a0d
 80009e4:	08000a1f 	.word	0x08000a1f
 80009e8:	08000a31 	.word	0x08000a31
 80009ec:	08000a53 	.word	0x08000a53
 80009f0:	08000a6b 	.word	0x08000a6b
 80009f4:	08000aa1 	.word	0x08000aa1
 80009f8:	08000ab3 	.word	0x08000ab3
 80009fc:	08000ad1 	.word	0x08000ad1
 8000a00:	08000ae1 	.word	0x08000ae1
 8000a04:	08000b11 	.word	0x08000b11
 8000a08:	08000b4d 	.word	0x08000b4d
	{
	case DNMXP_idle:
		if (dataIn == 0xFF)
 8000a0c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a10:	2bff      	cmp	r3, #255	; 0xff
 8000a12:	f040 81f8 	bne.w	8000e06 <DynamixelProtocal2+0x44a>
			State = DNMXP_1stHeader;
 8000a16:	4b85      	ldr	r3, [pc, #532]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
		break;
 8000a1c:	e1f3      	b.n	8000e06 <DynamixelProtocal2+0x44a>
	case DNMXP_1stHeader:
		if (dataIn == 0xFF)
 8000a1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	f040 81f1 	bne.w	8000e0a <DynamixelProtocal2+0x44e>
			State = DNMXP_2ndHeader;
 8000a28:	4b80      	ldr	r3, [pc, #512]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	701a      	strb	r2, [r3, #0]
		break;
 8000a2e:	e1ec      	b.n	8000e0a <DynamixelProtocal2+0x44e>
	case DNMXP_2ndHeader:
		if (dataIn == 0xFD)
 8000a30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a34:	2bfd      	cmp	r3, #253	; 0xfd
 8000a36:	d103      	bne.n	8000a40 <DynamixelProtocal2+0x84>
			State = DNMXP_3rdHeader;
 8000a38:	4b7c      	ldr	r3, [pc, #496]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	701a      	strb	r2, [r3, #0]
		else if (dataIn == 0xFF)
			; //do nothing
		else
			State = DNMXP_idle;
		break;
 8000a3e:	e1e6      	b.n	8000e0e <DynamixelProtocal2+0x452>
		else if (dataIn == 0xFF)
 8000a40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a44:	2bff      	cmp	r3, #255	; 0xff
 8000a46:	f000 81e2 	beq.w	8000e0e <DynamixelProtocal2+0x452>
			State = DNMXP_idle;
 8000a4a:	4b78      	ldr	r3, [pc, #480]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
		break;
 8000a50:	e1dd      	b.n	8000e0e <DynamixelProtocal2+0x452>
	case DNMXP_3rdHeader:
		if (dataIn == 0x00)
 8000a52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <DynamixelProtocal2+0xa6>
			State = DNMXP_Reserved;
 8000a5a:	4b74      	ldr	r3, [pc, #464]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8000a60:	e1d6      	b.n	8000e10 <DynamixelProtocal2+0x454>
			State = DNMXP_idle;
 8000a62:	4b72      	ldr	r3, [pc, #456]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
		break;
 8000a68:	e1d2      	b.n	8000e10 <DynamixelProtocal2+0x454>
	case DNMXP_Reserved:
		if ((dataIn == MotorID) | (dataIn == 0xFE))
 8000a6a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000a6e:	7afb      	ldrb	r3, [r7, #11]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	bf0c      	ite	eq
 8000a74:	2301      	moveq	r3, #1
 8000a76:	2300      	movne	r3, #0
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a7e:	2bfe      	cmp	r3, #254	; 0xfe
 8000a80:	bf0c      	ite	eq
 8000a82:	2301      	moveq	r3, #1
 8000a84:	2300      	movne	r3, #0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <DynamixelProtocal2+0xdc>
			State = DNMXP_ID;
 8000a90:	4b66      	ldr	r3, [pc, #408]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000a92:	2205      	movs	r2, #5
 8000a94:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8000a96:	e1bb      	b.n	8000e10 <DynamixelProtocal2+0x454>
			State = DNMXP_idle;
 8000a98:	4b64      	ldr	r3, [pc, #400]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
		break;
 8000a9e:	e1b7      	b.n	8000e10 <DynamixelProtocal2+0x454>
	case DNMXP_ID:
		datalen = dataIn & 0xFF;
 8000aa0:	893b      	ldrh	r3, [r7, #8]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b62      	ldr	r3, [pc, #392]	; (8000c30 <DynamixelProtocal2+0x274>)
 8000aa8:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN1;
 8000aaa:	4b60      	ldr	r3, [pc, #384]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000aac:	2206      	movs	r2, #6
 8000aae:	701a      	strb	r2, [r3, #0]
		break;
 8000ab0:	e1ae      	b.n	8000e10 <DynamixelProtocal2+0x454>
	case DNMXP_LEN1:
		datalen |= (dataIn & 0xFF) << 8;
 8000ab2:	893b      	ldrh	r3, [r7, #8]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	4b5d      	ldr	r3, [pc, #372]	; (8000c30 <DynamixelProtocal2+0x274>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b21b      	sxth	r3, r3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <DynamixelProtocal2+0x274>)
 8000ac6:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN2;
 8000ac8:	4b58      	ldr	r3, [pc, #352]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000aca:	2207      	movs	r2, #7
 8000acc:	701a      	strb	r2, [r3, #0]
		break;
 8000ace:	e19f      	b.n	8000e10 <DynamixelProtocal2+0x454>
	case DNMXP_LEN2:
		inst = dataIn;
 8000ad0:	893b      	ldrh	r3, [r7, #8]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b57      	ldr	r3, [pc, #348]	; (8000c34 <DynamixelProtocal2+0x278>)
 8000ad6:	701a      	strb	r2, [r3, #0]
		State = DNMXP_Inst;
 8000ad8:	4b54      	ldr	r3, [pc, #336]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e197      	b.n	8000e10 <DynamixelProtocal2+0x454>
	case DNMXP_Inst:
		if (datalen > 3)
 8000ae0:	4b53      	ldr	r3, [pc, #332]	; (8000c30 <DynamixelProtocal2+0x274>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d90a      	bls.n	8000afe <DynamixelProtocal2+0x142>
		{
			parameter[0] = dataIn;
 8000ae8:	893b      	ldrh	r3, [r7, #8]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b52      	ldr	r3, [pc, #328]	; (8000c38 <DynamixelProtocal2+0x27c>)
 8000aee:	701a      	strb	r2, [r3, #0]
			CollectedData = 1; //inst 1 + para[0] 1
 8000af0:	4b52      	ldr	r3, [pc, #328]	; (8000c3c <DynamixelProtocal2+0x280>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	801a      	strh	r2, [r3, #0]
			State = DNMXP_ParameterCollect;
 8000af6:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000af8:	2209      	movs	r2, #9
 8000afa:	701a      	strb	r2, [r3, #0]
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
		}

		break;
 8000afc:	e188      	b.n	8000e10 <DynamixelProtocal2+0x454>
			CRCCheck = dataIn & 0xff;
 8000afe:	893b      	ldrh	r3, [r7, #8]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b4e      	ldr	r3, [pc, #312]	; (8000c40 <DynamixelProtocal2+0x284>)
 8000b06:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b08:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000b0a:	220a      	movs	r2, #10
 8000b0c:	701a      	strb	r2, [r3, #0]
		break;
 8000b0e:	e17f      	b.n	8000e10 <DynamixelProtocal2+0x454>
	case DNMXP_ParameterCollect:

		if (datalen-3 > CollectedData)
 8000b10:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <DynamixelProtocal2+0x274>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <DynamixelProtocal2+0x280>)
 8000b18:	8812      	ldrh	r2, [r2, #0]
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	dd0d      	ble.n	8000b3a <DynamixelProtocal2+0x17e>
		{
			parameter[CollectedData] = dataIn;
 8000b1e:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <DynamixelProtocal2+0x280>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	893b      	ldrh	r3, [r7, #8]
 8000b26:	b2d9      	uxtb	r1, r3
 8000b28:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <DynamixelProtocal2+0x27c>)
 8000b2a:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <DynamixelProtocal2+0x280>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <DynamixelProtocal2+0x280>)
 8000b36:	801a      	strh	r2, [r3, #0]
		else
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
		}
		break;
 8000b38:	e16a      	b.n	8000e10 <DynamixelProtocal2+0x454>
			CRCCheck = dataIn & 0xff;
 8000b3a:	893b      	ldrh	r3, [r7, #8]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <DynamixelProtocal2+0x284>)
 8000b42:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b44:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <DynamixelProtocal2+0x270>)
 8000b46:	220a      	movs	r2, #10
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e161      	b.n	8000e10 <DynamixelProtocal2+0x454>
	case DNMXP_CRCAndExecute:
		CRCCheck |= (dataIn & 0xff) << 8;
 8000b4c:	893b      	ldrh	r3, [r7, #8]
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	b21a      	sxth	r2, r3
 8000b52:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <DynamixelProtocal2+0x284>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <DynamixelProtocal2+0x284>)
 8000b60:	801a      	strh	r2, [r3, #0]
		//Check CRC
		CRC_accum = 0;
 8000b62:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <DynamixelProtocal2+0x288>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	801a      	strh	r2, [r3, #0]
		packetSize = datalen + 7;
 8000b68:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <DynamixelProtocal2+0x274>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	3307      	adds	r3, #7
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <DynamixelProtocal2+0x28c>)
 8000b72:	801a      	strh	r2, [r3, #0]
		//check overlapse buffer
		if (uart->RxTail - packetSize >= 0) //not overlapse
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	8a9b      	ldrh	r3, [r3, #20]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <DynamixelProtocal2+0x28c>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db16      	blt.n	8000bb2 <DynamixelProtocal2+0x1f6>
		{
			CRC_accum = update_crc(CRC_accum,
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <DynamixelProtocal2+0x288>)
 8000b86:	8818      	ldrh	r0, [r3, #0]
					&(uart->RxBuffer[uart->RxTail - packetSize]),
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	8a92      	ldrh	r2, [r2, #20]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4a2d      	ldr	r2, [pc, #180]	; (8000c48 <DynamixelProtocal2+0x28c>)
 8000b94:	8812      	ldrh	r2, [r2, #0]
 8000b96:	1a8a      	subs	r2, r1, r2
 8000b98:	1899      	adds	r1, r3, r2
			CRC_accum = update_crc(CRC_accum,
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <DynamixelProtocal2+0x28c>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	f000 f944 	bl	8000e30 <update_crc>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <DynamixelProtocal2+0x288>)
 8000bae:	801a      	strh	r2, [r3, #0]
 8000bb0:	e02d      	b.n	8000c0e <DynamixelProtocal2+0x252>
					packetSize - 2);
		}
		else//overlapse
		{
			uint16_t firstPartStart = uart->RxTail - packetSize + uart->RxLen;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	8a9a      	ldrh	r2, [r3, #20]
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <DynamixelProtocal2+0x28c>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	88db      	ldrh	r3, [r3, #6]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <DynamixelProtocal2+0x288>)
 8000bca:	8818      	ldrh	r0, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	691a      	ldr	r2, [r3, #16]
 8000bd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000bd4:	18d1      	adds	r1, r2, r3
					uart->RxLen - firstPartStart);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	88da      	ldrh	r2, [r3, #6]
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000bda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	461a      	mov	r2, r3
 8000be4:	f000 f924 	bl	8000e30 <update_crc>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <DynamixelProtocal2+0x288>)
 8000bee:	801a      	strh	r2, [r3, #0]
			CRC_accum = update_crc(CRC_accum, uart->RxBuffer, uart->RxTail - 2);
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <DynamixelProtocal2+0x288>)
 8000bf2:	8818      	ldrh	r0, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6919      	ldr	r1, [r3, #16]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	8a9b      	ldrh	r3, [r3, #20]
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	f000 f915 	bl	8000e30 <update_crc>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <DynamixelProtocal2+0x288>)
 8000c0c:	801a      	strh	r2, [r3, #0]

		}

		if (CRC_accum == CRCCheck)
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <DynamixelProtocal2+0x288>)
 8000c10:	881a      	ldrh	r2, [r3, #0]
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <DynamixelProtocal2+0x284>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	f040 80cb 	bne.w	8000db2 <DynamixelProtocal2+0x3f6>
		{
			switch (inst)
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <DynamixelProtocal2+0x278>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d013      	beq.n	8000c4c <DynamixelProtocal2+0x290>
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d03c      	beq.n	8000ca2 <DynamixelProtocal2+0x2e6>
 8000c28:	e098      	b.n	8000d5c <DynamixelProtocal2+0x3a0>
 8000c2a:	bf00      	nop
 8000c2c:	200001a4 	.word	0x200001a4
 8000c30:	200001a6 	.word	0x200001a6
 8000c34:	200001a8 	.word	0x200001a8
 8000c38:	200001ac 	.word	0x200001ac
 8000c3c:	200002ac 	.word	0x200002ac
 8000c40:	200002ae 	.word	0x200002ae
 8000c44:	200002b0 	.word	0x200002b0
 8000c48:	200002b2 	.word	0x200002b2
			{
			case 0x01:// ping
			{
				//create packet template
				uint8_t temp[] =
 8000c4c:	4a72      	ldr	r2, [pc, #456]	; (8000e18 <DynamixelProtocal2+0x45c>)
 8000c4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c54:	c303      	stmia	r3!, {r0, r1}
 8000c56:	801a      	strh	r2, [r3, #0]
 8000c58:	3302      	adds	r3, #2
 8000c5a:	0c12      	lsrs	r2, r2, #16
 8000c5c:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x00, 0x00,
						0x00 };
				//config MotorID
				temp[4] = MotorID;
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				//calcuate CRC
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000c64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c68:	2209      	movs	r2, #9
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 f8df 	bl	8000e30 <update_crc>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				temp[9] = crc_calc & 0xff;
 8000c78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000c82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000c86:	0a1b      	lsrs	r3, r3, #8
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				//Sent Response Packet
				UARTTxWrite(uart, temp, 11);
 8000c90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c94:	220b      	movs	r2, #11
 8000c96:	4619      	mov	r1, r3
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff fe47 	bl	800092c <UARTTxWrite>
				break;
 8000c9e:	bf00      	nop
 8000ca0:	e0ad      	b.n	8000dfe <DynamixelProtocal2+0x442>
			}

			case 0x02://READ
			{
				uint16_t startAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF);
 8000ca2:	4b5e      	ldr	r3, [pc, #376]	; (8000e1c <DynamixelProtocal2+0x460>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				uint16_t numberOfDataToRead = (parameter[2]&0xFF)|(parameter[3]<<8 &0xFF);
 8000caa:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <DynamixelProtocal2+0x460>)
 8000cac:	789b      	ldrb	r3, [r3, #2]
 8000cae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x00,0x00,0x55,0x00};
 8000cb2:	4a5b      	ldr	r2, [pc, #364]	; (8000e20 <DynamixelProtocal2+0x464>)
 8000cb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cba:	c303      	stmia	r3!, {r0, r1}
 8000cbc:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 8000cbe:	7afb      	ldrb	r3, [r7, #11]
 8000cc0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				temp[5] = (numberOfDataToRead + 4) & 0xff ; // +inst+err+crc1+crc2
 8000cc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	3304      	adds	r3, #4
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				temp[6] = ((numberOfDataToRead + 4)>>8) & 0xff ;
 8000cd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	121b      	asrs	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000ce0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ce4:	2209      	movs	r2, #9
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 f8a1 	bl	8000e30 <update_crc>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),numberOfDataToRead);
 8000cf4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	18d1      	adds	r1, r2, r3
 8000cfc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8000d00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f893 	bl	8000e30 <update_crc>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 8000d10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				crctemp[1] = (crc_calc>>8)&0xff;
 8000d1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d1e:	0a1b      	lsrs	r3, r3, #8
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				UARTTxWrite(uart, temp,9);
 8000d28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2c:	2209      	movs	r2, #9
 8000d2e:	4619      	mov	r1, r3
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fdfb 	bl	800092c <UARTTxWrite>
				UARTTxWrite(uart, &(Memory[startAddr]),numberOfDataToRead);
 8000d36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fdf1 	bl	800092c <UARTTxWrite>
				UARTTxWrite(uart, crctemp,2);
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	2202      	movs	r2, #2
 8000d50:	4619      	mov	r1, r3
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fdea 	bl	800092c <UARTTxWrite>
				break;
 8000d58:	bf00      	nop
 8000d5a:	e050      	b.n	8000dfe <DynamixelProtocal2+0x442>
			{
				//LAB
			}
			default: //Unknown Inst
			{
				uint8_t temp[] =
 8000d5c:	4a31      	ldr	r2, [pc, #196]	; (8000e24 <DynamixelProtocal2+0x468>)
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d64:	c303      	stmia	r3!, {r0, r1}
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	0c12      	lsrs	r2, r2, #16
 8000d6c:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x02, 0x00,
						0x00 };
				temp[4] = MotorID;
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000d74:	f107 0320 	add.w	r3, r7, #32
 8000d78:	2209      	movs	r2, #9
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f857 	bl	8000e30 <update_crc>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				temp[9] = crc_calc & 0xff;
 8000d88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000d92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000d96:	0a1b      	lsrs	r3, r3, #8
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				UARTTxWrite(uart, temp, 11);
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	220b      	movs	r2, #11
 8000da6:	4619      	mov	r1, r3
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fdbf 	bl	800092c <UARTTxWrite>

				break;
 8000dae:	bf00      	nop
 8000db0:	e025      	b.n	8000dfe <DynamixelProtocal2+0x442>
			}
			}
		}
		else //crc error
		{
			uint8_t temp[] =
 8000db2:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <DynamixelProtocal2+0x46c>)
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dba:	c303      	stmia	r3!, {r0, r1}
 8000dbc:	801a      	strh	r2, [r3, #0]
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	0c12      	lsrs	r2, r2, #16
 8000dc2:	701a      	strb	r2, [r3, #0]
			{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x03, 0x00, 0x00 };
			temp[4] = MotorID;
 8000dc4:	7afb      	ldrb	r3, [r7, #11]
 8000dc6:	763b      	strb	r3, [r7, #24]
			uint16_t crc_calc = update_crc(0, temp, 9);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2209      	movs	r2, #9
 8000dce:	4619      	mov	r1, r3
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 f82d 	bl	8000e30 <update_crc>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			temp[9] = crc_calc & 0xff;
 8000ddc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	777b      	strb	r3, [r7, #29]
			temp[10] = (crc_calc >> 8) & 0xFF;
 8000de4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	77bb      	strb	r3, [r7, #30]
			UARTTxWrite(uart, temp, 11);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	220b      	movs	r2, #11
 8000df6:	4619      	mov	r1, r3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fd97 	bl	800092c <UARTTxWrite>
		}
		State = DNMXP_idle;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <DynamixelProtocal2+0x470>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
		break;
 8000e04:	e004      	b.n	8000e10 <DynamixelProtocal2+0x454>
		break;
 8000e06:	bf00      	nop
 8000e08:	e002      	b.n	8000e10 <DynamixelProtocal2+0x454>
		break;
 8000e0a:	bf00      	nop
 8000e0c:	e000      	b.n	8000e10 <DynamixelProtocal2+0x454>
		break;
 8000e0e:	bf00      	nop
	}

}
 8000e10:	bf00      	nop
 8000e12:	3758      	adds	r7, #88	; 0x58
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	0800398c 	.word	0x0800398c
 8000e1c:	200001ac 	.word	0x200001ac
 8000e20:	08003998 	.word	0x08003998
 8000e24:	080039a4 	.word	0x080039a4
 8000e28:	080039b0 	.word	0x080039b0
 8000e2c:	200001a4 	.word	0x200001a4

08000e30 <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr,
		unsigned short data_blk_size)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	463b      	mov	r3, r7
 8000e3a:	6019      	str	r1, [r3, #0]
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	1dbb      	adds	r3, r7, #6
 8000e40:	4602      	mov	r2, r0
 8000e42:	801a      	strh	r2, [r3, #0]
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	460a      	mov	r2, r1
 8000e48:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] =
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <update_crc+0x98>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	4611      	mov	r1, r2
 8000e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f002 fcfd 	bl	8003858 <memcpy>
			0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270,
			0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220,
			0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
			0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for (j = 0; j < data_blk_size; j++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000e64:	e023      	b.n	8000eae <update_crc+0x7e>
	{
		i = ((unsigned short) (crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000e66:	1dbb      	adds	r3, r7, #6
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000e72:	4639      	mov	r1, r7
 8000e74:	6809      	ldr	r1, [r1, #0]
 8000e76:	440b      	add	r3, r1
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	4053      	eors	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000e86:	1dbb      	adds	r3, r7, #6
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4053      	eors	r3, r2
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	801a      	strh	r2, [r3, #0]
	for (j = 0; j < data_blk_size; j++)
 8000ea4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d3d5      	bcc.n	8000e66 <update_crc+0x36>
	}

	return crc_accum;
 8000eba:	1dbb      	adds	r3, r7, #6
 8000ebc:	881b      	ldrh	r3, [r3, #0]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	080039bc 	.word	0x080039bc

08000ecc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <Error_Handler+0x6>

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f12:	2007      	movs	r0, #7
 8000f14:	f000 fabc 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_UART_MspInit+0x150>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f040 8091 	bne.w	800106a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b47      	ldr	r3, [pc, #284]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b43      	ldr	r3, [pc, #268]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a42      	ldr	r2, [pc, #264]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b40      	ldr	r3, [pc, #256]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f80:	230c      	movs	r3, #12
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f90:	2307      	movs	r3, #7
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4838      	ldr	r0, [pc, #224]	; (800107c <HAL_UART_MspInit+0x158>)
 8000f9c:	f000 fe4a 	bl	8001c34 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fa2:	4a38      	ldr	r2, [pc, #224]	; (8001084 <HAL_UART_MspInit+0x160>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fae:	4b34      	ldr	r3, [pc, #208]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	4b31      	ldr	r3, [pc, #196]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fe2:	4827      	ldr	r0, [pc, #156]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fe4:	f000 fa96 	bl	8001514 <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000fee:	f7ff ff6d 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff8:	4a21      	ldr	r2, [pc, #132]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001000:	4a22      	ldr	r2, [pc, #136]	; (800108c <HAL_UART_MspInit+0x168>)
 8001002:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <HAL_UART_MspInit+0x164>)
 800100e:	2240      	movs	r2, #64	; 0x40
 8001010:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_UART_MspInit+0x164>)
 800101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_UART_MspInit+0x164>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_UART_MspInit+0x164>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001040:	f000 fa68 	bl	8001514 <HAL_DMA_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800104a:	f7ff ff3f 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
 8001054:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2026      	movs	r0, #38	; 0x26
 8001060:	f000 fa21 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001064:	2026      	movs	r0, #38	; 0x26
 8001066:	f000 fa3a 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004400 	.word	0x40004400
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000
 8001080:	200002c0 	.word	0x200002c0
 8001084:	40026088 	.word	0x40026088
 8001088:	20000320 	.word	0x20000320
 800108c:	400260a0 	.word	0x400260a0

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f000 f8e8 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <DMA1_Stream5_IRQHandler+0x10>)
 80010ea:	f000 fb3b 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200002c0 	.word	0x200002c0

080010f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <DMA1_Stream6_IRQHandler+0x10>)
 80010fe:	f000 fb31 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000320 	.word	0x20000320

0800110c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <USART2_IRQHandler+0x10>)
 8001112:	f001 fcc7 	bl	8002aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000380 	.word	0x20000380

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f002 fb58 	bl	8003804 <__errno>
 8001154:	4602      	mov	r2, r0
 8001156:	230c      	movs	r3, #12
 8001158:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20020000 	.word	0x20020000
 8001180:	00000400 	.word	0x00000400
 8001184:	200002b4 	.word	0x200002b4
 8001188:	200003c8 	.word	0x200003c8

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <SystemInit+0x28>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <SystemInit+0x28>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SystemInit+0x28>)
 80011a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a6:	609a      	str	r2, [r3, #8]
#endif
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011be:	e003      	b.n	80011c8 <LoopCopyDataInit>

080011c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011c6:	3104      	adds	r1, #4

080011c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011d0:	d3f6      	bcc.n	80011c0 <CopyDataInit>
  ldr  r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011d4:	e002      	b.n	80011dc <LoopFillZerobss>

080011d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011d8:	f842 3b04 	str.w	r3, [r2], #4

080011dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011e0:	d3f9      	bcc.n	80011d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011e2:	f7ff ffd3 	bl	800118c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f002 fb13 	bl	8003810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff f975 	bl	80004d8 <main>
  bx  lr    
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011f4:	08003bec 	.word	0x08003bec
  ldr  r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011fc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001200:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001204:	200003c8 	.word	0x200003c8

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <HAL_Init+0x40>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_Init+0x40>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x40>)
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f92b 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fe48 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f943 	bl	80014fa <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f000 f90b 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008
 80012d4:	200003c0 	.word	0x200003c0

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200003c0 	.word	0x200003c0

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff29 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff3e 	bl	8001338 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff8e 	bl	80013e4 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff31 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffa2 	bl	800144c <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff feda 	bl	80012d8 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e099      	b.n	8001664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001550:	e00f      	b.n	8001572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001552:	f7ff fec1 	bl	80012d8 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b05      	cmp	r3, #5
 800155e:	d908      	bls.n	8001572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e078      	b.n	8001664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e8      	bne.n	8001552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_DMA_Init+0x158>)
 800158c:	4013      	ands	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800159e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d107      	bne.n	80015dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4313      	orrs	r3, r2
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f023 0307 	bic.w	r3, r3, #7
 80015f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	2b04      	cmp	r3, #4
 8001604:	d117      	bne.n	8001636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00e      	beq.n	8001636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fa91 	bl	8001b40 <DMA_CheckFifoParam>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2240      	movs	r2, #64	; 0x40
 8001628:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001632:	2301      	movs	r3, #1
 8001634:	e016      	b.n	8001664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fa48 	bl	8001ad4 <DMA_CalcBaseAndBitshift>
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	223f      	movs	r2, #63	; 0x3f
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	f010803f 	.word	0xf010803f

08001670 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_DMA_Start_IT+0x26>
 8001692:	2302      	movs	r3, #2
 8001694:	e040      	b.n	8001718 <HAL_DMA_Start_IT+0xa8>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d12f      	bne.n	800170a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f9da 	bl	8001a78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	409a      	lsls	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0216 	orr.w	r2, r2, #22
 80016de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0208 	orr.w	r2, r2, #8
 80016f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e005      	b.n	8001716 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001712:	2302      	movs	r3, #2
 8001714:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001716:	7dfb      	ldrb	r3, [r7, #23]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d004      	beq.n	800173e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00c      	b.n	8001758 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001770:	4b92      	ldr	r3, [pc, #584]	; (80019bc <HAL_DMA_IRQHandler+0x258>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a92      	ldr	r2, [pc, #584]	; (80019c0 <HAL_DMA_IRQHandler+0x25c>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2208      	movs	r2, #8
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01a      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	2201      	movs	r2, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	2201      	movs	r2, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	f043 0202 	orr.w	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180a:	2204      	movs	r2, #4
 800180c:	409a      	lsls	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d012      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00b      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	2204      	movs	r2, #4
 800182a:	409a      	lsls	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	2210      	movs	r2, #16
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d043      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03c      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	2210      	movs	r2, #16
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d018      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d024      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
 8001892:	e01f      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
 80018a4:	e016      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0208 	bic.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	2220      	movs	r2, #32
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 808e 	beq.w	8001a02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8086 	beq.w	8001a02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	2220      	movs	r2, #32
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d136      	bne.n	800197c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0216 	bic.w	r2, r2, #22
 800191c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800192c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_DMA_IRQHandler+0x1da>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0208 	bic.w	r2, r2, #8
 800194c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	223f      	movs	r2, #63	; 0x3f
 8001954:	409a      	lsls	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	2b00      	cmp	r3, #0
 8001970:	d07d      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
        }
        return;
 800197a:	e078      	b.n	8001a6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01c      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d108      	bne.n	80019aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	2b00      	cmp	r3, #0
 800199e:	d030      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e02b      	b.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d027      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
 80019ba:	e022      	b.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
 80019bc:	20000000 	.word	0x20000000
 80019c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0210 	bic.w	r2, r2, #16
 80019e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d032      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d022      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d307      	bcc.n	8001a4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f2      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x2ca>
 8001a48:	e000      	b.n	8001a4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
 8001a6c:	e000      	b.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a6e:	bf00      	nop
    }
  }
}
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop

08001a78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d108      	bne.n	8001ab8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ab6:	e007      	b.n	8001ac8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	60da      	str	r2, [r3, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3b10      	subs	r3, #16
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <DMA_CalcBaseAndBitshift+0x68>)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d909      	bls.n	8001b16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58
 8001b14:	e007      	b.n	8001b26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	aaaaaaab 	.word	0xaaaaaaab
 8001b3c:	08003bd4 	.word	0x08003bd4

08001b40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11f      	bne.n	8001b9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d855      	bhi.n	8001c0c <DMA_CheckFifoParam+0xcc>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <DMA_CheckFifoParam+0x28>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b8b 	.word	0x08001b8b
 8001b70:	08001b79 	.word	0x08001b79
 8001b74:	08001c0d 	.word	0x08001c0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d045      	beq.n	8001c10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b88:	e042      	b.n	8001c10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b92:	d13f      	bne.n	8001c14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b98:	e03c      	b.n	8001c14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba2:	d121      	bne.n	8001be8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d836      	bhi.n	8001c18 <DMA_CheckFifoParam+0xd8>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <DMA_CheckFifoParam+0x70>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001bc7 	.word	0x08001bc7
 8001bb8:	08001bc1 	.word	0x08001bc1
 8001bbc:	08001bd9 	.word	0x08001bd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc4:	e02f      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd6:	e021      	b.n	8001c1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001be0:	d11e      	bne.n	8001c20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001be6:	e01b      	b.n	8001c20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d902      	bls.n	8001bf4 <DMA_CheckFifoParam+0xb4>
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d003      	beq.n	8001bfa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bf2:	e018      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf8:	e015      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00e      	beq.n	8001c24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0a:	e00b      	b.n	8001c24 <DMA_CheckFifoParam+0xe4>
      break;
 8001c0c:	bf00      	nop
 8001c0e:	e00a      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c10:	bf00      	nop
 8001c12:	e008      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c14:	bf00      	nop
 8001c16:	e006      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c18:	bf00      	nop
 8001c1a:	e004      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1c:	bf00      	nop
 8001c1e:	e002      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c20:	bf00      	nop
 8001c22:	e000      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c24:	bf00      	nop
    }
  } 
  
  return status; 
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e159      	b.n	8001f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	f040 8148 	bne.w	8001efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d00b      	beq.n	8001c8e <HAL_GPIO_Init+0x5a>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c82:	2b11      	cmp	r3, #17
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b12      	cmp	r3, #18
 8001c8c:	d130      	bne.n	8001cf0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 0201 	and.w	r2, r3, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0xfc>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b12      	cmp	r3, #18
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	69b9      	ldr	r1, [r7, #24]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80a2 	beq.w	8001efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <HAL_GPIO_Init+0x2e4>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a55      	ldr	r2, [pc, #340]	; (8001f18 <HAL_GPIO_Init+0x2e4>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_GPIO_Init+0x2e4>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd6:	4a51      	ldr	r2, [pc, #324]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_GPIO_Init+0x2ec>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x202>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a47      	ldr	r2, [pc, #284]	; (8001f24 <HAL_GPIO_Init+0x2f0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x1fe>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <HAL_GPIO_Init+0x2f4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x1fa>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <HAL_GPIO_Init+0x2f8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x1f6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <HAL_GPIO_Init+0x2fc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x1f2>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4934      	ldr	r1, [pc, #208]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7a:	4a2e      	ldr	r2, [pc, #184]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e80:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea4:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f aea2 	bls.w	8001c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3724      	adds	r7, #36	; 0x24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40013c00 	.word	0x40013c00

08001f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f54:	e003      	b.n	8001f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	041a      	lsls	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	619a      	str	r2, [r3, #24]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e25b      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d075      	beq.n	8002076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f8a:	4ba3      	ldr	r3, [pc, #652]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d00c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f96:	4ba0      	ldr	r3, [pc, #640]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d112      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa2:	4b9d      	ldr	r3, [pc, #628]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fae:	d10b      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	4b99      	ldr	r3, [pc, #612]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d05b      	beq.n	8002074 <HAL_RCC_OscConfig+0x108>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d157      	bne.n	8002074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e236      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd0:	d106      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x74>
 8001fd2:	4b91      	ldr	r3, [pc, #580]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a90      	ldr	r2, [pc, #576]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e01d      	b.n	800201c <HAL_RCC_OscConfig+0xb0>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a8a      	ldr	r2, [pc, #552]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b88      	ldr	r3, [pc, #544]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a87      	ldr	r2, [pc, #540]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0xb0>
 8002004:	4b84      	ldr	r3, [pc, #528]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a83      	ldr	r2, [pc, #524]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b81      	ldr	r3, [pc, #516]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a80      	ldr	r2, [pc, #512]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff f958 	bl	80012d8 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff f954 	bl	80012d8 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1fb      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0xc0>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f944 	bl	80012d8 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff f940 	bl	80012d8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1e7      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0xe8>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d063      	beq.n	800214a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002082:	4b65      	ldr	r3, [pc, #404]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208e:	4b62      	ldr	r3, [pc, #392]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002096:	2b08      	cmp	r3, #8
 8002098:	d11c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209a:	4b5f      	ldr	r3, [pc, #380]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	4b5c      	ldr	r3, [pc, #368]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x152>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e1bb      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4952      	ldr	r1, [pc, #328]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	e03a      	b.n	800214a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020dc:	4b4f      	ldr	r3, [pc, #316]	; (800221c <HAL_RCC_OscConfig+0x2b0>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7ff f8f9 	bl	80012d8 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff f8f5 	bl	80012d8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e19c      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b43      	ldr	r3, [pc, #268]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4940      	ldr	r1, [pc, #256]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_RCC_OscConfig+0x2b0>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f8d8 	bl	80012d8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff f8d4 	bl	80012d8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e17b      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	4b36      	ldr	r3, [pc, #216]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d030      	beq.n	80021b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_RCC_OscConfig+0x2b4>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7ff f8b8 	bl	80012d8 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216c:	f7ff f8b4 	bl	80012d8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e15b      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x200>
 800218a:	e015      	b.n	80021b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218c:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_OscConfig+0x2b4>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff f8a1 	bl	80012d8 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219a:	f7ff f89d 	bl	80012d8 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e144      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f0      	bne.n	800219a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a0 	beq.w	8002306 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10f      	bne.n	80021f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_OscConfig+0x2b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d121      	bne.n	8002246 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_RCC_OscConfig+0x2b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_RCC_OscConfig+0x2b8>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220e:	f7ff f863 	bl	80012d8 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	e011      	b.n	800223a <HAL_RCC_OscConfig+0x2ce>
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	42470000 	.word	0x42470000
 8002220:	42470e80 	.word	0x42470e80
 8002224:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002228:	f7ff f856 	bl	80012d8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e0fd      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b81      	ldr	r3, [pc, #516]	; (8002440 <HAL_RCC_OscConfig+0x4d4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d106      	bne.n	800225c <HAL_RCC_OscConfig+0x2f0>
 800224e:	4b7d      	ldr	r3, [pc, #500]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	4a7c      	ldr	r2, [pc, #496]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6713      	str	r3, [r2, #112]	; 0x70
 800225a:	e01c      	b.n	8002296 <HAL_RCC_OscConfig+0x32a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x312>
 8002264:	4b77      	ldr	r3, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	4a76      	ldr	r2, [pc, #472]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6713      	str	r3, [r2, #112]	; 0x70
 8002270:	4b74      	ldr	r3, [pc, #464]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a73      	ldr	r2, [pc, #460]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
 800227c:	e00b      	b.n	8002296 <HAL_RCC_OscConfig+0x32a>
 800227e:	4b71      	ldr	r3, [pc, #452]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	4a70      	ldr	r2, [pc, #448]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6713      	str	r3, [r2, #112]	; 0x70
 800228a:	4b6e      	ldr	r3, [pc, #440]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	4a6d      	ldr	r2, [pc, #436]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d015      	beq.n	80022ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7ff f81b 	bl	80012d8 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7ff f817 	bl	80012d8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e0bc      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	4b61      	ldr	r3, [pc, #388]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ee      	beq.n	80022a6 <HAL_RCC_OscConfig+0x33a>
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7ff f805 	bl	80012d8 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7ff f801 	bl	80012d8 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0a6      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	4b56      	ldr	r3, [pc, #344]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ee      	bne.n	80022d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fa:	4b52      	ldr	r3, [pc, #328]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8092 	beq.w	8002434 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002310:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d05c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d141      	bne.n	80023a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002324:	4b48      	ldr	r3, [pc, #288]	; (8002448 <HAL_RCC_OscConfig+0x4dc>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe ffd5 	bl	80012d8 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe ffd1 	bl	80012d8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e078      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002344:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	019b      	lsls	r3, r3, #6
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	3b01      	subs	r3, #1
 800236a:	041b      	lsls	r3, r3, #16
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	4933      	ldr	r1, [pc, #204]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237a:	4b33      	ldr	r3, [pc, #204]	; (8002448 <HAL_RCC_OscConfig+0x4dc>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe ffaa 	bl	80012d8 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe ffa6 	bl	80012d8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e04d      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x41c>
 80023a6:	e045      	b.n	8002434 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <HAL_RCC_OscConfig+0x4dc>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe ff93 	bl	80012d8 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe ff8f 	bl	80012d8 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e036      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x44a>
 80023d4:	e02e      	b.n	8002434 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e029      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_RCC_OscConfig+0x4d8>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d11c      	bne.n	8002430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d115      	bne.n	8002430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800240a:	4013      	ands	r3, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002410:	4293      	cmp	r3, r2
 8002412:	d10d      	bne.n	8002430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40007000 	.word	0x40007000
 8002444:	40023800 	.word	0x40023800
 8002448:	42470060 	.word	0x42470060

0800244c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0cc      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b68      	ldr	r3, [pc, #416]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d90c      	bls.n	8002488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b65      	ldr	r3, [pc, #404]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b63      	ldr	r3, [pc, #396]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0b8      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a0:	4b59      	ldr	r3, [pc, #356]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a58      	ldr	r2, [pc, #352]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b8:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a52      	ldr	r2, [pc, #328]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c4:	4b50      	ldr	r3, [pc, #320]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	494d      	ldr	r1, [pc, #308]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d044      	beq.n	800256c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b47      	ldr	r3, [pc, #284]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d119      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e07f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d003      	beq.n	800250a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002506:	2b03      	cmp	r3, #3
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e06f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e067      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b37      	ldr	r3, [pc, #220]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4934      	ldr	r1, [pc, #208]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800253c:	f7fe fecc 	bl	80012d8 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7fe fec8 	bl	80012d8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e04f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d20c      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e032      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4916      	ldr	r1, [pc, #88]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	490e      	ldr	r1, [pc, #56]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d2:	f000 f821 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80025d6:	4601      	mov	r1, r0
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	fa21 f303 	lsr.w	r3, r1, r3
 80025ea:	4a09      	ldr	r2, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fe2c 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00
 8002608:	40023800 	.word	0x40023800
 800260c:	08003bbc 	.word	0x08003bbc
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262e:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b04      	cmp	r3, #4
 8002638:	d007      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x32>
 800263a:	2b08      	cmp	r3, #8
 800263c:	d008      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x38>
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 80b4 	bne.w	80027ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b5e      	ldr	r3, [pc, #376]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002646:	60bb      	str	r3, [r7, #8]
       break;
 8002648:	e0b3      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264a:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800264c:	60bb      	str	r3, [r7, #8]
      break;
 800264e:	e0b0      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002650:	4b5a      	ldr	r3, [pc, #360]	; (80027bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265a:	4b58      	ldr	r3, [pc, #352]	; (80027bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d04a      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b55      	ldr	r3, [pc, #340]	; (80027bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	f04f 0400 	mov.w	r4, #0
 8002670:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	ea03 0501 	and.w	r5, r3, r1
 800267c:	ea04 0602 	and.w	r6, r4, r2
 8002680:	4629      	mov	r1, r5
 8002682:	4632      	mov	r2, r6
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	f04f 0400 	mov.w	r4, #0
 800268c:	0154      	lsls	r4, r2, #5
 800268e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002692:	014b      	lsls	r3, r1, #5
 8002694:	4619      	mov	r1, r3
 8002696:	4622      	mov	r2, r4
 8002698:	1b49      	subs	r1, r1, r5
 800269a:	eb62 0206 	sbc.w	r2, r2, r6
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	f04f 0400 	mov.w	r4, #0
 80026a6:	0194      	lsls	r4, r2, #6
 80026a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026ac:	018b      	lsls	r3, r1, #6
 80026ae:	1a5b      	subs	r3, r3, r1
 80026b0:	eb64 0402 	sbc.w	r4, r4, r2
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	00e2      	lsls	r2, r4, #3
 80026be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026c2:	00d9      	lsls	r1, r3, #3
 80026c4:	460b      	mov	r3, r1
 80026c6:	4614      	mov	r4, r2
 80026c8:	195b      	adds	r3, r3, r5
 80026ca:	eb44 0406 	adc.w	r4, r4, r6
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	0262      	lsls	r2, r4, #9
 80026d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80026dc:	0259      	lsls	r1, r3, #9
 80026de:	460b      	mov	r3, r1
 80026e0:	4614      	mov	r4, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	4621      	mov	r1, r4
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f04f 0400 	mov.w	r4, #0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4623      	mov	r3, r4
 80026f0:	f7fd fd72 	bl	80001d8 <__aeabi_uldivmod>
 80026f4:	4603      	mov	r3, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	e049      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	f04f 0400 	mov.w	r4, #0
 8002706:	f240 11ff 	movw	r1, #511	; 0x1ff
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	ea03 0501 	and.w	r5, r3, r1
 8002712:	ea04 0602 	and.w	r6, r4, r2
 8002716:	4629      	mov	r1, r5
 8002718:	4632      	mov	r2, r6
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	f04f 0400 	mov.w	r4, #0
 8002722:	0154      	lsls	r4, r2, #5
 8002724:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002728:	014b      	lsls	r3, r1, #5
 800272a:	4619      	mov	r1, r3
 800272c:	4622      	mov	r2, r4
 800272e:	1b49      	subs	r1, r1, r5
 8002730:	eb62 0206 	sbc.w	r2, r2, r6
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	f04f 0400 	mov.w	r4, #0
 800273c:	0194      	lsls	r4, r2, #6
 800273e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002742:	018b      	lsls	r3, r1, #6
 8002744:	1a5b      	subs	r3, r3, r1
 8002746:	eb64 0402 	sbc.w	r4, r4, r2
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	00e2      	lsls	r2, r4, #3
 8002754:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002758:	00d9      	lsls	r1, r3, #3
 800275a:	460b      	mov	r3, r1
 800275c:	4614      	mov	r4, r2
 800275e:	195b      	adds	r3, r3, r5
 8002760:	eb44 0406 	adc.w	r4, r4, r6
 8002764:	f04f 0100 	mov.w	r1, #0
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	02a2      	lsls	r2, r4, #10
 800276e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002772:	0299      	lsls	r1, r3, #10
 8002774:	460b      	mov	r3, r1
 8002776:	4614      	mov	r4, r2
 8002778:	4618      	mov	r0, r3
 800277a:	4621      	mov	r1, r4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f04f 0400 	mov.w	r4, #0
 8002782:	461a      	mov	r2, r3
 8002784:	4623      	mov	r3, r4
 8002786:	f7fd fd27 	bl	80001d8 <__aeabi_uldivmod>
 800278a:	4603      	mov	r3, r0
 800278c:	460c      	mov	r4, r1
 800278e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	60bb      	str	r3, [r7, #8]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027ae:	60bb      	str	r3, [r7, #8]
      break;
 80027b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b2:	68bb      	ldr	r3, [r7, #8]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	00f42400 	.word	0x00f42400
 80027c4:	007a1200 	.word	0x007a1200

080027c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027e4:	f7ff fff0 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027e8:	4601      	mov	r1, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4a03      	ldr	r2, [pc, #12]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	08003bcc 	.word	0x08003bcc

08002808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800280c:	f7ff ffdc 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 8002810:	4601      	mov	r1, r0
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0b5b      	lsrs	r3, r3, #13
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4a03      	ldr	r2, [pc, #12]	; (800282c <HAL_RCC_GetPCLK2Freq+0x24>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	08003bcc 	.word	0x08003bcc

08002830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e03f      	b.n	80028c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fb64 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2224      	movs	r2, #36	; 0x24
 8002860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fc41 	bl	80030fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	4613      	mov	r3, r2
 80028d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d153      	bne.n	800298e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_UART_Transmit_DMA+0x26>
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e04c      	b.n	8002990 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_UART_Transmit_DMA+0x38>
 8002900:	2302      	movs	r3, #2
 8002902:	e045      	b.n	8002990 <HAL_UART_Transmit_DMA+0xc4>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2221      	movs	r2, #33	; 0x21
 8002928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_UART_Transmit_DMA+0xcc>)
 8002932:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4a18      	ldr	r2, [pc, #96]	; (800299c <HAL_UART_Transmit_DMA+0xd0>)
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_UART_Transmit_DMA+0xd4>)
 8002942:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	2200      	movs	r2, #0
 800294a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3304      	adds	r3, #4
 8002960:	461a      	mov	r2, r3
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	f7fe fe84 	bl	8001670 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002970:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002988:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800298e:	2302      	movs	r3, #2
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	08002d09 	.word	0x08002d09
 800299c:	08002d5b 	.word	0x08002d5b
 80029a0:	08002dfb 	.word	0x08002dfb

080029a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d166      	bne.n	8002a8c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_UART_Receive_DMA+0x26>
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e05f      	b.n	8002a8e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_UART_Receive_DMA+0x38>
 80029d8:	2302      	movs	r3, #2
 80029da:	e058      	b.n	8002a8e <HAL_UART_Receive_DMA+0xea>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2222      	movs	r2, #34	; 0x22
 80029fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <HAL_UART_Receive_DMA+0xf4>)
 8002a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <HAL_UART_Receive_DMA+0xf8>)
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <HAL_UART_Receive_DMA+0xfc>)
 8002a14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	f7fe fe1b 	bl	8001670 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a66:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a86:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	08002d77 	.word	0x08002d77
 8002a9c:	08002ddf 	.word	0x08002ddf
 8002aa0:	08002dfb 	.word	0x08002dfb

08002aa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_UART_IRQHandler+0x52>
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa83 	bl	8002ffa <UART_Receive_IT>
      return;
 8002af4:	e0d1      	b.n	8002c9a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80b0 	beq.w	8002c5e <HAL_UART_IRQHandler+0x1ba>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_UART_IRQHandler+0x70>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80a5 	beq.w	8002c5e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_UART_IRQHandler+0x90>
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_UART_IRQHandler+0xb0>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	f043 0202 	orr.w	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_UART_IRQHandler+0xd0>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	f043 0204 	orr.w	r2, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00f      	beq.n	8002b9e <HAL_UART_IRQHandler+0xfa>
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <HAL_UART_IRQHandler+0xee>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	f043 0208 	orr.w	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d078      	beq.n	8002c98 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x11c>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fa1d 	bl	8002ffa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d102      	bne.n	8002be8 <HAL_UART_IRQHandler+0x144>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d031      	beq.n	8002c4c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f966 	bl	8002eba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d123      	bne.n	8002c44 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <HAL_UART_IRQHandler+0x1fc>)
 8002c1a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe fd7d 	bl	8001720 <HAL_DMA_Abort_IT>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d016      	beq.n	8002c5a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c36:	4610      	mov	r0, r2
 8002c38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3a:	e00e      	b.n	8002c5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f859 	bl	8002cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c42:	e00a      	b.n	8002c5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f855 	bl	8002cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4a:	e006      	b.n	8002c5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f851 	bl	8002cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c58:	e01e      	b.n	8002c98 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5a:	bf00      	nop
    return;
 8002c5c:	e01c      	b.n	8002c98 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_UART_IRQHandler+0x1d6>
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f953 	bl	8002f1e <UART_Transmit_IT>
    return;
 8002c78:	e00f      	b.n	8002c9a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_UART_IRQHandler+0x1f6>
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f99b 	bl	8002fca <UART_EndTransmit_IT>
    return;
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002c98:	bf00      	nop
  }
}
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	08002ef7 	.word	0x08002ef7

08002ca4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d113      	bne.n	8002d4c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d38:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d48:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d4a:	e002      	b.n	8002d52 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff ffa9 	bl	8002ca4 <HAL_UART_TxCpltCallback>
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff ffa5 	bl	8002cb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d11e      	bne.n	8002dd0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff ff7b 	bl	8002ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff ff77 	bl	8002ce0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b80      	cmp	r3, #128	; 0x80
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b21      	cmp	r3, #33	; 0x21
 8002e2c:	d108      	bne.n	8002e40 <UART_DMAError+0x46>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002e3a:	68b8      	ldr	r0, [r7, #8]
 8002e3c:	f000 f827 	bl	8002e8e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b22      	cmp	r3, #34	; 0x22
 8002e60:	d108      	bne.n	8002e74 <UART_DMAError+0x7a>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002e6e:	68b8      	ldr	r0, [r7, #8]
 8002e70:	f000 f823 	bl	8002eba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	f043 0210 	orr.w	r2, r3, #16
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e80:	68b8      	ldr	r0, [r7, #8]
 8002e82:	f7ff ff37 	bl	8002cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ea4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ed0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff feef 	bl	8002cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b21      	cmp	r3, #33	; 0x21
 8002f30:	d144      	bne.n	8002fbc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3a:	d11a      	bne.n	8002f72 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f50:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	1c9a      	adds	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	621a      	str	r2, [r3, #32]
 8002f64:	e00e      	b.n	8002f84 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	621a      	str	r2, [r3, #32]
 8002f70:	e008      	b.n	8002f84 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	1c59      	adds	r1, r3, #1
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6211      	str	r1, [r2, #32]
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4619      	mov	r1, r3
 8002f92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10f      	bne.n	8002fb8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fe5a 	bl	8002ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b22      	cmp	r3, #34	; 0x22
 800300c:	d171      	bne.n	80030f2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	d123      	bne.n	8003060 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10e      	bne.n	8003044 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	1c9a      	adds	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
 8003042:	e029      	b.n	8003098 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	b29b      	uxth	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
 800305e:	e01b      	b.n	8003098 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6858      	ldr	r0, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	1c59      	adds	r1, r3, #1
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6291      	str	r1, [r2, #40]	; 0x28
 8003078:	b2c2      	uxtb	r2, r0
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e00c      	b.n	8003098 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	1c58      	adds	r0, r3, #1
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	6288      	str	r0, [r1, #40]	; 0x28
 8003090:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4619      	mov	r1, r3
 80030a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d120      	bne.n	80030ee <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0220 	bic.w	r2, r2, #32
 80030ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fdf1 	bl	8002ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e002      	b.n	80030f4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e000      	b.n	80030f4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800313e:	f023 030c 	bic.w	r3, r3, #12
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	68f9      	ldr	r1, [r7, #12]
 8003148:	430b      	orrs	r3, r1
 800314a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316a:	f040 818b 	bne.w	8003484 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4ac1      	ldr	r2, [pc, #772]	; (8003478 <UART_SetConfig+0x37c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d005      	beq.n	8003184 <UART_SetConfig+0x88>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4abf      	ldr	r2, [pc, #764]	; (800347c <UART_SetConfig+0x380>)
 800317e:	4293      	cmp	r3, r2
 8003180:	f040 80bd 	bne.w	80032fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003184:	f7ff fb40 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8003188:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	461d      	mov	r5, r3
 800318e:	f04f 0600 	mov.w	r6, #0
 8003192:	46a8      	mov	r8, r5
 8003194:	46b1      	mov	r9, r6
 8003196:	eb18 0308 	adds.w	r3, r8, r8
 800319a:	eb49 0409 	adc.w	r4, r9, r9
 800319e:	4698      	mov	r8, r3
 80031a0:	46a1      	mov	r9, r4
 80031a2:	eb18 0805 	adds.w	r8, r8, r5
 80031a6:	eb49 0906 	adc.w	r9, r9, r6
 80031aa:	f04f 0100 	mov.w	r1, #0
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031be:	4688      	mov	r8, r1
 80031c0:	4691      	mov	r9, r2
 80031c2:	eb18 0005 	adds.w	r0, r8, r5
 80031c6:	eb49 0106 	adc.w	r1, r9, r6
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	461d      	mov	r5, r3
 80031d0:	f04f 0600 	mov.w	r6, #0
 80031d4:	196b      	adds	r3, r5, r5
 80031d6:	eb46 0406 	adc.w	r4, r6, r6
 80031da:	461a      	mov	r2, r3
 80031dc:	4623      	mov	r3, r4
 80031de:	f7fc fffb 	bl	80001d8 <__aeabi_uldivmod>
 80031e2:	4603      	mov	r3, r0
 80031e4:	460c      	mov	r4, r1
 80031e6:	461a      	mov	r2, r3
 80031e8:	4ba5      	ldr	r3, [pc, #660]	; (8003480 <UART_SetConfig+0x384>)
 80031ea:	fba3 2302 	umull	r2, r3, r3, r2
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	461d      	mov	r5, r3
 80031f8:	f04f 0600 	mov.w	r6, #0
 80031fc:	46a9      	mov	r9, r5
 80031fe:	46b2      	mov	sl, r6
 8003200:	eb19 0309 	adds.w	r3, r9, r9
 8003204:	eb4a 040a 	adc.w	r4, sl, sl
 8003208:	4699      	mov	r9, r3
 800320a:	46a2      	mov	sl, r4
 800320c:	eb19 0905 	adds.w	r9, r9, r5
 8003210:	eb4a 0a06 	adc.w	sl, sl, r6
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003220:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003224:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003228:	4689      	mov	r9, r1
 800322a:	4692      	mov	sl, r2
 800322c:	eb19 0005 	adds.w	r0, r9, r5
 8003230:	eb4a 0106 	adc.w	r1, sl, r6
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	461d      	mov	r5, r3
 800323a:	f04f 0600 	mov.w	r6, #0
 800323e:	196b      	adds	r3, r5, r5
 8003240:	eb46 0406 	adc.w	r4, r6, r6
 8003244:	461a      	mov	r2, r3
 8003246:	4623      	mov	r3, r4
 8003248:	f7fc ffc6 	bl	80001d8 <__aeabi_uldivmod>
 800324c:	4603      	mov	r3, r0
 800324e:	460c      	mov	r4, r1
 8003250:	461a      	mov	r2, r3
 8003252:	4b8b      	ldr	r3, [pc, #556]	; (8003480 <UART_SetConfig+0x384>)
 8003254:	fba3 1302 	umull	r1, r3, r3, r2
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	2164      	movs	r1, #100	; 0x64
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	3332      	adds	r3, #50	; 0x32
 8003266:	4a86      	ldr	r2, [pc, #536]	; (8003480 <UART_SetConfig+0x384>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003274:	4498      	add	r8, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	461d      	mov	r5, r3
 800327a:	f04f 0600 	mov.w	r6, #0
 800327e:	46a9      	mov	r9, r5
 8003280:	46b2      	mov	sl, r6
 8003282:	eb19 0309 	adds.w	r3, r9, r9
 8003286:	eb4a 040a 	adc.w	r4, sl, sl
 800328a:	4699      	mov	r9, r3
 800328c:	46a2      	mov	sl, r4
 800328e:	eb19 0905 	adds.w	r9, r9, r5
 8003292:	eb4a 0a06 	adc.w	sl, sl, r6
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032aa:	4689      	mov	r9, r1
 80032ac:	4692      	mov	sl, r2
 80032ae:	eb19 0005 	adds.w	r0, r9, r5
 80032b2:	eb4a 0106 	adc.w	r1, sl, r6
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	461d      	mov	r5, r3
 80032bc:	f04f 0600 	mov.w	r6, #0
 80032c0:	196b      	adds	r3, r5, r5
 80032c2:	eb46 0406 	adc.w	r4, r6, r6
 80032c6:	461a      	mov	r2, r3
 80032c8:	4623      	mov	r3, r4
 80032ca:	f7fc ff85 	bl	80001d8 <__aeabi_uldivmod>
 80032ce:	4603      	mov	r3, r0
 80032d0:	460c      	mov	r4, r1
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <UART_SetConfig+0x384>)
 80032d6:	fba3 1302 	umull	r1, r3, r3, r2
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2164      	movs	r1, #100	; 0x64
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	3332      	adds	r3, #50	; 0x32
 80032e8:	4a65      	ldr	r2, [pc, #404]	; (8003480 <UART_SetConfig+0x384>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 0207 	and.w	r2, r3, #7
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4442      	add	r2, r8
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	e26f      	b.n	80037de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032fe:	f7ff fa6f 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8003302:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	461d      	mov	r5, r3
 8003308:	f04f 0600 	mov.w	r6, #0
 800330c:	46a8      	mov	r8, r5
 800330e:	46b1      	mov	r9, r6
 8003310:	eb18 0308 	adds.w	r3, r8, r8
 8003314:	eb49 0409 	adc.w	r4, r9, r9
 8003318:	4698      	mov	r8, r3
 800331a:	46a1      	mov	r9, r4
 800331c:	eb18 0805 	adds.w	r8, r8, r5
 8003320:	eb49 0906 	adc.w	r9, r9, r6
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003330:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003334:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003338:	4688      	mov	r8, r1
 800333a:	4691      	mov	r9, r2
 800333c:	eb18 0005 	adds.w	r0, r8, r5
 8003340:	eb49 0106 	adc.w	r1, r9, r6
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	461d      	mov	r5, r3
 800334a:	f04f 0600 	mov.w	r6, #0
 800334e:	196b      	adds	r3, r5, r5
 8003350:	eb46 0406 	adc.w	r4, r6, r6
 8003354:	461a      	mov	r2, r3
 8003356:	4623      	mov	r3, r4
 8003358:	f7fc ff3e 	bl	80001d8 <__aeabi_uldivmod>
 800335c:	4603      	mov	r3, r0
 800335e:	460c      	mov	r4, r1
 8003360:	461a      	mov	r2, r3
 8003362:	4b47      	ldr	r3, [pc, #284]	; (8003480 <UART_SetConfig+0x384>)
 8003364:	fba3 2302 	umull	r2, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	461d      	mov	r5, r3
 8003372:	f04f 0600 	mov.w	r6, #0
 8003376:	46a9      	mov	r9, r5
 8003378:	46b2      	mov	sl, r6
 800337a:	eb19 0309 	adds.w	r3, r9, r9
 800337e:	eb4a 040a 	adc.w	r4, sl, sl
 8003382:	4699      	mov	r9, r3
 8003384:	46a2      	mov	sl, r4
 8003386:	eb19 0905 	adds.w	r9, r9, r5
 800338a:	eb4a 0a06 	adc.w	sl, sl, r6
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800339a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800339e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033a2:	4689      	mov	r9, r1
 80033a4:	4692      	mov	sl, r2
 80033a6:	eb19 0005 	adds.w	r0, r9, r5
 80033aa:	eb4a 0106 	adc.w	r1, sl, r6
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	461d      	mov	r5, r3
 80033b4:	f04f 0600 	mov.w	r6, #0
 80033b8:	196b      	adds	r3, r5, r5
 80033ba:	eb46 0406 	adc.w	r4, r6, r6
 80033be:	461a      	mov	r2, r3
 80033c0:	4623      	mov	r3, r4
 80033c2:	f7fc ff09 	bl	80001d8 <__aeabi_uldivmod>
 80033c6:	4603      	mov	r3, r0
 80033c8:	460c      	mov	r4, r1
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <UART_SetConfig+0x384>)
 80033ce:	fba3 1302 	umull	r1, r3, r3, r2
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2164      	movs	r1, #100	; 0x64
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	3332      	adds	r3, #50	; 0x32
 80033e0:	4a27      	ldr	r2, [pc, #156]	; (8003480 <UART_SetConfig+0x384>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033ee:	4498      	add	r8, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	461d      	mov	r5, r3
 80033f4:	f04f 0600 	mov.w	r6, #0
 80033f8:	46a9      	mov	r9, r5
 80033fa:	46b2      	mov	sl, r6
 80033fc:	eb19 0309 	adds.w	r3, r9, r9
 8003400:	eb4a 040a 	adc.w	r4, sl, sl
 8003404:	4699      	mov	r9, r3
 8003406:	46a2      	mov	sl, r4
 8003408:	eb19 0905 	adds.w	r9, r9, r5
 800340c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800341c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003420:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003424:	4689      	mov	r9, r1
 8003426:	4692      	mov	sl, r2
 8003428:	eb19 0005 	adds.w	r0, r9, r5
 800342c:	eb4a 0106 	adc.w	r1, sl, r6
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	461d      	mov	r5, r3
 8003436:	f04f 0600 	mov.w	r6, #0
 800343a:	196b      	adds	r3, r5, r5
 800343c:	eb46 0406 	adc.w	r4, r6, r6
 8003440:	461a      	mov	r2, r3
 8003442:	4623      	mov	r3, r4
 8003444:	f7fc fec8 	bl	80001d8 <__aeabi_uldivmod>
 8003448:	4603      	mov	r3, r0
 800344a:	460c      	mov	r4, r1
 800344c:	461a      	mov	r2, r3
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <UART_SetConfig+0x384>)
 8003450:	fba3 1302 	umull	r1, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	2164      	movs	r1, #100	; 0x64
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	3332      	adds	r3, #50	; 0x32
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <UART_SetConfig+0x384>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	f003 0207 	and.w	r2, r3, #7
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4442      	add	r2, r8
 8003474:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003476:	e1b2      	b.n	80037de <UART_SetConfig+0x6e2>
 8003478:	40011000 	.word	0x40011000
 800347c:	40011400 	.word	0x40011400
 8003480:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4ad7      	ldr	r2, [pc, #860]	; (80037e8 <UART_SetConfig+0x6ec>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d005      	beq.n	800349a <UART_SetConfig+0x39e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4ad6      	ldr	r2, [pc, #856]	; (80037ec <UART_SetConfig+0x6f0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	f040 80d1 	bne.w	800363c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800349a:	f7ff f9b5 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 800349e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	469a      	mov	sl, r3
 80034a4:	f04f 0b00 	mov.w	fp, #0
 80034a8:	46d0      	mov	r8, sl
 80034aa:	46d9      	mov	r9, fp
 80034ac:	eb18 0308 	adds.w	r3, r8, r8
 80034b0:	eb49 0409 	adc.w	r4, r9, r9
 80034b4:	4698      	mov	r8, r3
 80034b6:	46a1      	mov	r9, r4
 80034b8:	eb18 080a 	adds.w	r8, r8, sl
 80034bc:	eb49 090b 	adc.w	r9, r9, fp
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034d4:	4688      	mov	r8, r1
 80034d6:	4691      	mov	r9, r2
 80034d8:	eb1a 0508 	adds.w	r5, sl, r8
 80034dc:	eb4b 0609 	adc.w	r6, fp, r9
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4619      	mov	r1, r3
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	f04f 0400 	mov.w	r4, #0
 80034f2:	0094      	lsls	r4, r2, #2
 80034f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034f8:	008b      	lsls	r3, r1, #2
 80034fa:	461a      	mov	r2, r3
 80034fc:	4623      	mov	r3, r4
 80034fe:	4628      	mov	r0, r5
 8003500:	4631      	mov	r1, r6
 8003502:	f7fc fe69 	bl	80001d8 <__aeabi_uldivmod>
 8003506:	4603      	mov	r3, r0
 8003508:	460c      	mov	r4, r1
 800350a:	461a      	mov	r2, r3
 800350c:	4bb8      	ldr	r3, [pc, #736]	; (80037f0 <UART_SetConfig+0x6f4>)
 800350e:	fba3 2302 	umull	r2, r3, r3, r2
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	469b      	mov	fp, r3
 800351c:	f04f 0c00 	mov.w	ip, #0
 8003520:	46d9      	mov	r9, fp
 8003522:	46e2      	mov	sl, ip
 8003524:	eb19 0309 	adds.w	r3, r9, r9
 8003528:	eb4a 040a 	adc.w	r4, sl, sl
 800352c:	4699      	mov	r9, r3
 800352e:	46a2      	mov	sl, r4
 8003530:	eb19 090b 	adds.w	r9, r9, fp
 8003534:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003544:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003548:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800354c:	4689      	mov	r9, r1
 800354e:	4692      	mov	sl, r2
 8003550:	eb1b 0509 	adds.w	r5, fp, r9
 8003554:	eb4c 060a 	adc.w	r6, ip, sl
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4619      	mov	r1, r3
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	f04f 0400 	mov.w	r4, #0
 800356a:	0094      	lsls	r4, r2, #2
 800356c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003570:	008b      	lsls	r3, r1, #2
 8003572:	461a      	mov	r2, r3
 8003574:	4623      	mov	r3, r4
 8003576:	4628      	mov	r0, r5
 8003578:	4631      	mov	r1, r6
 800357a:	f7fc fe2d 	bl	80001d8 <__aeabi_uldivmod>
 800357e:	4603      	mov	r3, r0
 8003580:	460c      	mov	r4, r1
 8003582:	461a      	mov	r2, r3
 8003584:	4b9a      	ldr	r3, [pc, #616]	; (80037f0 <UART_SetConfig+0x6f4>)
 8003586:	fba3 1302 	umull	r1, r3, r3, r2
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2164      	movs	r1, #100	; 0x64
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	3332      	adds	r3, #50	; 0x32
 8003598:	4a95      	ldr	r2, [pc, #596]	; (80037f0 <UART_SetConfig+0x6f4>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a4:	4498      	add	r8, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	469b      	mov	fp, r3
 80035aa:	f04f 0c00 	mov.w	ip, #0
 80035ae:	46d9      	mov	r9, fp
 80035b0:	46e2      	mov	sl, ip
 80035b2:	eb19 0309 	adds.w	r3, r9, r9
 80035b6:	eb4a 040a 	adc.w	r4, sl, sl
 80035ba:	4699      	mov	r9, r3
 80035bc:	46a2      	mov	sl, r4
 80035be:	eb19 090b 	adds.w	r9, r9, fp
 80035c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035da:	4689      	mov	r9, r1
 80035dc:	4692      	mov	sl, r2
 80035de:	eb1b 0509 	adds.w	r5, fp, r9
 80035e2:	eb4c 060a 	adc.w	r6, ip, sl
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4619      	mov	r1, r3
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	f04f 0400 	mov.w	r4, #0
 80035f8:	0094      	lsls	r4, r2, #2
 80035fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035fe:	008b      	lsls	r3, r1, #2
 8003600:	461a      	mov	r2, r3
 8003602:	4623      	mov	r3, r4
 8003604:	4628      	mov	r0, r5
 8003606:	4631      	mov	r1, r6
 8003608:	f7fc fde6 	bl	80001d8 <__aeabi_uldivmod>
 800360c:	4603      	mov	r3, r0
 800360e:	460c      	mov	r4, r1
 8003610:	461a      	mov	r2, r3
 8003612:	4b77      	ldr	r3, [pc, #476]	; (80037f0 <UART_SetConfig+0x6f4>)
 8003614:	fba3 1302 	umull	r1, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	2164      	movs	r1, #100	; 0x64
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	3332      	adds	r3, #50	; 0x32
 8003626:	4a72      	ldr	r2, [pc, #456]	; (80037f0 <UART_SetConfig+0x6f4>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4442      	add	r2, r8
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	e0d0      	b.n	80037de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800363c:	f7ff f8d0 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8003640:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	469a      	mov	sl, r3
 8003646:	f04f 0b00 	mov.w	fp, #0
 800364a:	46d0      	mov	r8, sl
 800364c:	46d9      	mov	r9, fp
 800364e:	eb18 0308 	adds.w	r3, r8, r8
 8003652:	eb49 0409 	adc.w	r4, r9, r9
 8003656:	4698      	mov	r8, r3
 8003658:	46a1      	mov	r9, r4
 800365a:	eb18 080a 	adds.w	r8, r8, sl
 800365e:	eb49 090b 	adc.w	r9, r9, fp
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800366e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003672:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003676:	4688      	mov	r8, r1
 8003678:	4691      	mov	r9, r2
 800367a:	eb1a 0508 	adds.w	r5, sl, r8
 800367e:	eb4b 0609 	adc.w	r6, fp, r9
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4619      	mov	r1, r3
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	f04f 0400 	mov.w	r4, #0
 8003694:	0094      	lsls	r4, r2, #2
 8003696:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800369a:	008b      	lsls	r3, r1, #2
 800369c:	461a      	mov	r2, r3
 800369e:	4623      	mov	r3, r4
 80036a0:	4628      	mov	r0, r5
 80036a2:	4631      	mov	r1, r6
 80036a4:	f7fc fd98 	bl	80001d8 <__aeabi_uldivmod>
 80036a8:	4603      	mov	r3, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <UART_SetConfig+0x6f4>)
 80036b0:	fba3 2302 	umull	r2, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	469b      	mov	fp, r3
 80036be:	f04f 0c00 	mov.w	ip, #0
 80036c2:	46d9      	mov	r9, fp
 80036c4:	46e2      	mov	sl, ip
 80036c6:	eb19 0309 	adds.w	r3, r9, r9
 80036ca:	eb4a 040a 	adc.w	r4, sl, sl
 80036ce:	4699      	mov	r9, r3
 80036d0:	46a2      	mov	sl, r4
 80036d2:	eb19 090b 	adds.w	r9, r9, fp
 80036d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036da:	f04f 0100 	mov.w	r1, #0
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036ee:	4689      	mov	r9, r1
 80036f0:	4692      	mov	sl, r2
 80036f2:	eb1b 0509 	adds.w	r5, fp, r9
 80036f6:	eb4c 060a 	adc.w	r6, ip, sl
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4619      	mov	r1, r3
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	0094      	lsls	r4, r2, #2
 800370e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003712:	008b      	lsls	r3, r1, #2
 8003714:	461a      	mov	r2, r3
 8003716:	4623      	mov	r3, r4
 8003718:	4628      	mov	r0, r5
 800371a:	4631      	mov	r1, r6
 800371c:	f7fc fd5c 	bl	80001d8 <__aeabi_uldivmod>
 8003720:	4603      	mov	r3, r0
 8003722:	460c      	mov	r4, r1
 8003724:	461a      	mov	r2, r3
 8003726:	4b32      	ldr	r3, [pc, #200]	; (80037f0 <UART_SetConfig+0x6f4>)
 8003728:	fba3 1302 	umull	r1, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2164      	movs	r1, #100	; 0x64
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	3332      	adds	r3, #50	; 0x32
 800373a:	4a2d      	ldr	r2, [pc, #180]	; (80037f0 <UART_SetConfig+0x6f4>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003746:	4498      	add	r8, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	469b      	mov	fp, r3
 800374c:	f04f 0c00 	mov.w	ip, #0
 8003750:	46d9      	mov	r9, fp
 8003752:	46e2      	mov	sl, ip
 8003754:	eb19 0309 	adds.w	r3, r9, r9
 8003758:	eb4a 040a 	adc.w	r4, sl, sl
 800375c:	4699      	mov	r9, r3
 800375e:	46a2      	mov	sl, r4
 8003760:	eb19 090b 	adds.w	r9, r9, fp
 8003764:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003774:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003778:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800377c:	4689      	mov	r9, r1
 800377e:	4692      	mov	sl, r2
 8003780:	eb1b 0509 	adds.w	r5, fp, r9
 8003784:	eb4c 060a 	adc.w	r6, ip, sl
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4619      	mov	r1, r3
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	f04f 0400 	mov.w	r4, #0
 800379a:	0094      	lsls	r4, r2, #2
 800379c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037a0:	008b      	lsls	r3, r1, #2
 80037a2:	461a      	mov	r2, r3
 80037a4:	4623      	mov	r3, r4
 80037a6:	4628      	mov	r0, r5
 80037a8:	4631      	mov	r1, r6
 80037aa:	f7fc fd15 	bl	80001d8 <__aeabi_uldivmod>
 80037ae:	4603      	mov	r3, r0
 80037b0:	460c      	mov	r4, r1
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <UART_SetConfig+0x6f4>)
 80037b6:	fba3 1302 	umull	r1, r3, r3, r2
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2164      	movs	r1, #100	; 0x64
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	3332      	adds	r3, #50	; 0x32
 80037c8:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <UART_SetConfig+0x6f4>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	f003 020f 	and.w	r2, r3, #15
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4442      	add	r2, r8
 80037da:	609a      	str	r2, [r3, #8]
}
 80037dc:	e7ff      	b.n	80037de <UART_SetConfig+0x6e2>
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e8:	40011000 	.word	0x40011000
 80037ec:	40011400 	.word	0x40011400
 80037f0:	51eb851f 	.word	0x51eb851f

080037f4 <calloc>:
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <calloc+0xc>)
 80037f6:	460a      	mov	r2, r1
 80037f8:	4601      	mov	r1, r0
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	f000 b83f 	b.w	800387e <_calloc_r>
 8003800:	2000000c 	.word	0x2000000c

08003804 <__errno>:
 8003804:	4b01      	ldr	r3, [pc, #4]	; (800380c <__errno+0x8>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	2000000c 	.word	0x2000000c

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4e0d      	ldr	r6, [pc, #52]	; (8003848 <__libc_init_array+0x38>)
 8003814:	4c0d      	ldr	r4, [pc, #52]	; (800384c <__libc_init_array+0x3c>)
 8003816:	1ba4      	subs	r4, r4, r6
 8003818:	10a4      	asrs	r4, r4, #2
 800381a:	2500      	movs	r5, #0
 800381c:	42a5      	cmp	r5, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	4e0b      	ldr	r6, [pc, #44]	; (8003850 <__libc_init_array+0x40>)
 8003822:	4c0c      	ldr	r4, [pc, #48]	; (8003854 <__libc_init_array+0x44>)
 8003824:	f000 f8a6 	bl	8003974 <_init>
 8003828:	1ba4      	subs	r4, r4, r6
 800382a:	10a4      	asrs	r4, r4, #2
 800382c:	2500      	movs	r5, #0
 800382e:	42a5      	cmp	r5, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003838:	4798      	blx	r3
 800383a:	3501      	adds	r5, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003842:	4798      	blx	r3
 8003844:	3501      	adds	r5, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	08003be4 	.word	0x08003be4
 800384c:	08003be4 	.word	0x08003be4
 8003850:	08003be4 	.word	0x08003be4
 8003854:	08003be8 	.word	0x08003be8

08003858 <memcpy>:
 8003858:	b510      	push	{r4, lr}
 800385a:	1e43      	subs	r3, r0, #1
 800385c:	440a      	add	r2, r1
 800385e:	4291      	cmp	r1, r2
 8003860:	d100      	bne.n	8003864 <memcpy+0xc>
 8003862:	bd10      	pop	{r4, pc}
 8003864:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800386c:	e7f7      	b.n	800385e <memcpy+0x6>

0800386e <memset>:
 800386e:	4402      	add	r2, r0
 8003870:	4603      	mov	r3, r0
 8003872:	4293      	cmp	r3, r2
 8003874:	d100      	bne.n	8003878 <memset+0xa>
 8003876:	4770      	bx	lr
 8003878:	f803 1b01 	strb.w	r1, [r3], #1
 800387c:	e7f9      	b.n	8003872 <memset+0x4>

0800387e <_calloc_r>:
 800387e:	b538      	push	{r3, r4, r5, lr}
 8003880:	fb02 f401 	mul.w	r4, r2, r1
 8003884:	4621      	mov	r1, r4
 8003886:	f000 f809 	bl	800389c <_malloc_r>
 800388a:	4605      	mov	r5, r0
 800388c:	b118      	cbz	r0, 8003896 <_calloc_r+0x18>
 800388e:	4622      	mov	r2, r4
 8003890:	2100      	movs	r1, #0
 8003892:	f7ff ffec 	bl	800386e <memset>
 8003896:	4628      	mov	r0, r5
 8003898:	bd38      	pop	{r3, r4, r5, pc}
	...

0800389c <_malloc_r>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	1ccd      	adds	r5, r1, #3
 80038a0:	f025 0503 	bic.w	r5, r5, #3
 80038a4:	3508      	adds	r5, #8
 80038a6:	2d0c      	cmp	r5, #12
 80038a8:	bf38      	it	cc
 80038aa:	250c      	movcc	r5, #12
 80038ac:	2d00      	cmp	r5, #0
 80038ae:	4606      	mov	r6, r0
 80038b0:	db01      	blt.n	80038b6 <_malloc_r+0x1a>
 80038b2:	42a9      	cmp	r1, r5
 80038b4:	d903      	bls.n	80038be <_malloc_r+0x22>
 80038b6:	230c      	movs	r3, #12
 80038b8:	6033      	str	r3, [r6, #0]
 80038ba:	2000      	movs	r0, #0
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
 80038be:	f000 f857 	bl	8003970 <__malloc_lock>
 80038c2:	4a21      	ldr	r2, [pc, #132]	; (8003948 <_malloc_r+0xac>)
 80038c4:	6814      	ldr	r4, [r2, #0]
 80038c6:	4621      	mov	r1, r4
 80038c8:	b991      	cbnz	r1, 80038f0 <_malloc_r+0x54>
 80038ca:	4c20      	ldr	r4, [pc, #128]	; (800394c <_malloc_r+0xb0>)
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	b91b      	cbnz	r3, 80038d8 <_malloc_r+0x3c>
 80038d0:	4630      	mov	r0, r6
 80038d2:	f000 f83d 	bl	8003950 <_sbrk_r>
 80038d6:	6020      	str	r0, [r4, #0]
 80038d8:	4629      	mov	r1, r5
 80038da:	4630      	mov	r0, r6
 80038dc:	f000 f838 	bl	8003950 <_sbrk_r>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d124      	bne.n	800392e <_malloc_r+0x92>
 80038e4:	230c      	movs	r3, #12
 80038e6:	6033      	str	r3, [r6, #0]
 80038e8:	4630      	mov	r0, r6
 80038ea:	f000 f842 	bl	8003972 <__malloc_unlock>
 80038ee:	e7e4      	b.n	80038ba <_malloc_r+0x1e>
 80038f0:	680b      	ldr	r3, [r1, #0]
 80038f2:	1b5b      	subs	r3, r3, r5
 80038f4:	d418      	bmi.n	8003928 <_malloc_r+0x8c>
 80038f6:	2b0b      	cmp	r3, #11
 80038f8:	d90f      	bls.n	800391a <_malloc_r+0x7e>
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	50cd      	str	r5, [r1, r3]
 80038fe:	18cc      	adds	r4, r1, r3
 8003900:	4630      	mov	r0, r6
 8003902:	f000 f836 	bl	8003972 <__malloc_unlock>
 8003906:	f104 000b 	add.w	r0, r4, #11
 800390a:	1d23      	adds	r3, r4, #4
 800390c:	f020 0007 	bic.w	r0, r0, #7
 8003910:	1ac3      	subs	r3, r0, r3
 8003912:	d0d3      	beq.n	80038bc <_malloc_r+0x20>
 8003914:	425a      	negs	r2, r3
 8003916:	50e2      	str	r2, [r4, r3]
 8003918:	e7d0      	b.n	80038bc <_malloc_r+0x20>
 800391a:	428c      	cmp	r4, r1
 800391c:	684b      	ldr	r3, [r1, #4]
 800391e:	bf16      	itet	ne
 8003920:	6063      	strne	r3, [r4, #4]
 8003922:	6013      	streq	r3, [r2, #0]
 8003924:	460c      	movne	r4, r1
 8003926:	e7eb      	b.n	8003900 <_malloc_r+0x64>
 8003928:	460c      	mov	r4, r1
 800392a:	6849      	ldr	r1, [r1, #4]
 800392c:	e7cc      	b.n	80038c8 <_malloc_r+0x2c>
 800392e:	1cc4      	adds	r4, r0, #3
 8003930:	f024 0403 	bic.w	r4, r4, #3
 8003934:	42a0      	cmp	r0, r4
 8003936:	d005      	beq.n	8003944 <_malloc_r+0xa8>
 8003938:	1a21      	subs	r1, r4, r0
 800393a:	4630      	mov	r0, r6
 800393c:	f000 f808 	bl	8003950 <_sbrk_r>
 8003940:	3001      	adds	r0, #1
 8003942:	d0cf      	beq.n	80038e4 <_malloc_r+0x48>
 8003944:	6025      	str	r5, [r4, #0]
 8003946:	e7db      	b.n	8003900 <_malloc_r+0x64>
 8003948:	200002b8 	.word	0x200002b8
 800394c:	200002bc 	.word	0x200002bc

08003950 <_sbrk_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4c06      	ldr	r4, [pc, #24]	; (800396c <_sbrk_r+0x1c>)
 8003954:	2300      	movs	r3, #0
 8003956:	4605      	mov	r5, r0
 8003958:	4608      	mov	r0, r1
 800395a:	6023      	str	r3, [r4, #0]
 800395c:	f7fd fbe0 	bl	8001120 <_sbrk>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_sbrk_r+0x1a>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	b103      	cbz	r3, 800396a <_sbrk_r+0x1a>
 8003968:	602b      	str	r3, [r5, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	200003c4 	.word	0x200003c4

08003970 <__malloc_lock>:
 8003970:	4770      	bx	lr

08003972 <__malloc_unlock>:
 8003972:	4770      	bx	lr

08003974 <_init>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr

08003980 <_fini>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr
